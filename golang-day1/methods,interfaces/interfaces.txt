This document we should read is actually page 9 to 14 for interfaces. But the link contains document of 26 pages, hence 1/26.

1) 9/26
interfaces:
 -An interface type is defined as a set of method signatures - ig it means; it contains a group of methods of form: 
 type 'name' interface{
    Abs() float64,
    factorial() int,
 }

2) 10/26
States that there is no need to explicitly write the implements key word as in java. 
instead it is unederstood thru code that it implicitly happens.
See the document please.

3) 11/26 (little doubt shld see utube, examples not very clear)
-Interface values can be thought of as a tuple of a 'value' and a 'concrete type'
-An interface value holds a value of a specific underlying concrete type.
-Calling a method on an interface value executes the method of the same name on its underlying type.

4) 12/26  --- better ask Golang mentor mkc.
Interface values with nil underlying values
doubt, did not understand clearly man seriously.
Note that an interface value that holds a nil concrete value is itself non-nil.

5) 13/26
 Nil interface values
-A nil interface value holds neither value nor concrete type.
-Calling a method on a nil interface is a run-time error because there is no type inside the interface tuple to indicate which concrete method to call.

6) 14/26
Empty interface:
- interface with 0 methods
- An empty interface may hold values of any type. (Every type implements at least zero methods.)
- Empty interfaces are used by code that handles values of unknown type. For example, fmt.Print takes any number of arguments of type interface{}.

see code little. 

interfaces- from 11/26 - 14/26 see very thoughroughly.









 